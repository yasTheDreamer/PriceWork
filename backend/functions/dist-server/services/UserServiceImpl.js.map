{"version":3,"sources":["../../../server/services/UserServiceImpl.js"],"names":["UserServiceImpl","user","UserRepository","UserRepositoryImpl","update","err","console","log","res","findAll","key","exists","data","updateRecord","getRecord","UserService"],"mappings":"uGAAA;AACA,qE;;AAEMA,e;AACJ,6BAAc;;AAEb,G;;AAEQC,IAAAA,I,EAAM;AACb;AACA,UAAIA,IAAI,IAAI,QAAOA,IAAP,MAAgB,QAA5B,EAAsC;AACpC,YAAI;AACF,cAAMC,cAAc,GAAG,IAAIC,8BAAJ,EAAvB;AACA,iBAAOD,cAAc,CAACE,MAAf,CAAsBH,IAAtB,CAAP;AACD,SAHD,CAGE,OAAOI,GAAP,EAAY;AACZC,UAAAA,OAAO,CAACC,GAAR,CAAY,iDAAiDF,GAA7D;AACD;AACF;AACF,K;;AAEUG,IAAAA,G,EAAK;AACd,UAAI;AACF,YAAMN,cAAc,GAAG,IAAIC,8BAAJ,EAAvB;AACAD,QAAAA,cAAc,CAACO,OAAf,CAAuBD,GAAvB;AACD,OAHD,CAGE,OAAOH,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAY,wCAAwCF,GAApD;AACD;AACF,K;;AAEYK,IAAAA,G,EAAK;AAChB,UAAI;AACF,YAAMR,cAAc,GAAG,IAAIC,8BAAJ,EAAvB;AACA,eAAOD,cAAc,CAACS,MAAf,CAAsBD,GAAtB,CAAP;AACD,OAHD,CAGE,OAAOL,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAY,uCAAuCF,GAAnD;AACD;AACF,K;;AAEYK,IAAAA,G,EAAKE,I,EAAM;AACtB,UAAI;AACF,YAAMV,cAAc,GAAG,IAAIC,8BAAJ,EAAvB;AACA,eAAOD,cAAc,CAACW,YAAf,CAA4BH,GAA5B,EAAiCE,IAAjC,CAAP;AACD,OAHD,CAGE,OAAOP,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BF,GAAvC;AACD;AACF,K;;AAESK,IAAAA,G,EAAK;AACb,UAAI;AACF,YAAMR,cAAc,GAAG,IAAIC,8BAAJ,EAAvB;AACA,eAAOD,cAAc,CAACY,SAAf,CAAyBJ,GAAzB,CAAP;AACD,OAHD,CAGE,OAAOL,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAA6BF,GAAzC;AACD;AACF,K,8BAnD2BU,wB;;;AAsDff,e","sourcesContent":["import UserRepositoryImpl from \"../repositories/UserRepositoryImpl\";\r\nimport UserService from \"./UserService\";\r\n\r\nclass UserServiceImpl extends UserService {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  saveUser(user) {\r\n    //business logic\r\n    if (user && typeof user === \"object\") {\r\n      try {\r\n        const UserRepository = new UserRepositoryImpl();\r\n        return UserRepository.update(user);\r\n      } catch (err) {\r\n        console.log(\"user may be undefined or not well structured\" + err);\r\n      }\r\n    }\r\n  }\r\n\r\n  getAllData(res) {\r\n    try {\r\n      const UserRepository = new UserRepositoryImpl();\r\n      UserRepository.findAll(res);\r\n    } catch (err) {\r\n      console.log(\"cannot fetch data from the database\" + err);\r\n    }\r\n  }\r\n\r\n  recordExists(key) {\r\n    try {\r\n      const UserRepository = new UserRepositoryImpl();\r\n      return UserRepository.exists(key);\r\n    } catch (err) {\r\n      console.log(\"error checking if the record exist\" + err);\r\n    }\r\n  }\r\n\r\n  updateRecord(key, data) {\r\n    try {\r\n      const UserRepository = new UserRepositoryImpl();\r\n      return UserRepository.updateRecord(key, data);\r\n    } catch (err) {\r\n      console.log(\"couldn't update record\" + err);\r\n    }\r\n  }\r\n\r\n  getRecord(key) {\r\n    try {\r\n      const UserRepository = new UserRepositoryImpl();\r\n      return UserRepository.getRecord(key);\r\n    } catch (err) {\r\n      console.log(\"error getting the record\" + err);\r\n    }\r\n  }\r\n}\r\n\r\nexport default UserServiceImpl;\r\n"],"file":"UserServiceImpl.js"}